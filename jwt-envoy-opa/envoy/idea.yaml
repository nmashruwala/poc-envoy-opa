static_resources:
  listeners:
    - name: main_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 443 }
      filter_chains:
        # Filter chain for mTLS (inter-service communication with client certificate)
        - filter_chain_match:
            transport_protocol: "tls"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                # Specify mTLS settings, e.g., trusted CA certs for internal services
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                http_filters:
                  # External authorization with OPA for mTLS (internal services)
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        server_uri:
                          uri: "http://opa:8181"
                          cluster: opa_cluster
                        path_prefix: "/v1/data/envoy/authz/allow"

        # Filter chain for user requests (TLS without client certificate)
        - filter_chain_match:
            transport_protocol: "tls"
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: false
              common_tls_context:
                # Specify TLS settings for user requests, e.g., public CA certs
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                http_filters:
                  # JWT Authentication for OAuth user requests
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        oauth_provider:
                          issuer: "https://your-oauth-provider"
                          audiences: ["your-service"]
                          remote_jwks:
                            http_uri:
                              uri: "https://your-oauth-provider/jwks"
                              cluster: oauth_provider_cluster
                          forward: true
                  # External authorization with OPA for user requests
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      http_service:
                        server_uri:
                          uri: "http://opa:8181"
                          cluster: opa_cluster
                        path_prefix: "/v1/data/envoy/authz/allow"
